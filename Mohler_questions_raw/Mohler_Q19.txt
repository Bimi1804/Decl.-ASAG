#############################################################################
		Question: How are overloaded functions differentiated by the compiler?
		Answer: Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.

5	[6]	The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.
3	[5]	They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.
5	[8]	The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.
5	[3]	Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.
5	[4]	The compiler selects proper function to execute based on number, types and order of arguments in the function call.
3	[24]	By the type they are initilized with (int, char, etc.)
5	[9]	It selects the proper function to execute based on number, types and order of arguments in the function call.
3	[22]	overloaded functions must have the same return type but different input parameters
5	[23]	It examines the names, types, and order of arguments on each function.
5	[2]	unique function signatures
5	[29]	Is based on number, types, and order of arguments in the function call.
5	[31]	Compiler selects proper function to execute based on number, types and order of arguments in the function call.
0	[12]	not answered
3	[21]	they have to have same return type, but different input parameters
4.5	[13]	Overloaded functions are differentiated by their parameters.
5	[11]	The compiler selects the right function to execute from the number, types and order of arguments in the function call.
3	[17]	it creates a set of candidate functions then a set of viable functions
5	[7]	their function signature.
5	[10]	The number and type of its parameters.
5	[27]	by their function signature
3.5	[25]	They have the same name, just different parameters.
5	[20]	They are differntiated by number, types and order of arguments in the function call.
5	[18]	it looks at the number, types, and order of arguments in the function call<br>
5	[19]	The compiler differentiates overloaded functions by their signature.
5	[30]	By the number, types, and order of their arguments
5	[16]	Compiler selects proper function to execute based on number, types and order of arguments in the function call.
4.5	[26]	paremeters
5	[1]	By the number, and the types and order of the  parameters.
5	[28]	by the number and type of arguments
4	[15]	by their signature (return type, argument list)
3	[14]	overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing. 